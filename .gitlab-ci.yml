# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

workflow:
    rules:
      - if: $CI_COMMIT_REF_NAME ==  "sandbox"
        variables:
          SERVICE_ACCOUNT: $SANDBOX_SERVICE_ACCOUNT_CICD
          PROJECT_ID: 'tenpo-datalake-sandbox'

      - if: $CI_COMMIT_REF_NAME == "develop" 
        variables:                                 
          SERVICE_ACCOUNT: $DEVELOP_SERVICE_ACCOUNT_CICD
          PROJECT_ID: 'tenpo-datalake-prod'

      - when: always 

build-job:       # This job runs in the build stage, which runs first.
  image: google/cloud-sdk:alpine
  before_script:
    - gcloud config set project $PROJECT_ID
    - echo $SERVICE_ACCOUNT | base64 -d > service_account.json
    - gcloud auth activate-service-account --key-file service_account.json
    - apk add zip   
  rules:
    - if: ($CI_COMMIT_REF_NAME == "sandbox" ||  $CI_COMMIT_REF_NAME == "develop")
  stage: build
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."
    - cd resources && sh cicd.sh && cd ..
    - cd tasks && sh cicd.sh

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
